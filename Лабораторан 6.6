package myPackage;

public class One {
    private int number;
    private double value;
    private String name;

    public One(int number, double value, String name) {
        this.number = number;
        this.value = value;
        this.name = name;
    }

    public void voidMethod() {
        System.out.println("Void method in class One");
        System.out.println("Number: " + number);
        System.out.println("Value: " + value);
        System.out.println("Name: " + name);
    }

    public int typedMethod(int parameter) {
        System.out.println("Typed method in class One");
        return number + parameter;
    }

    public void otherMethod(Two other) {
        System.out.println("Other method in class One");
        System.out.println("Age: " + other.getAge());
        System.out.println("Is Active: " + other.isActive());
        System.out.println("Description: " + other.getDescription());
    }

    public void dynamicParametersMethod(String... strings) {
        System.out.println("Dynamic Parameters Method in class One");
        for (String str : strings) {
            System.out.println("String: " + str);
        }
    }

    // Перевизначений метод, що приймає дані іншого типу
    public int typedMethod(double parameter) {
        System.out.println("Overridden typed method in class One");
        return (int) (value + parameter);
    }

    // Метод зі статичним ім'ям та динамічною логікою
    public static void staticMethod() {
        System.out.println("Static method in class One");
        int randomNumber = (int) (Math.random() * 100);
        System.out.println("Random number: " + randomNumber);
    }
}

public class Two {
    private int age;
    private boolean isActive;
    private String description;

    public Two(int age, boolean isActive, String description) {
        this.age = age;
        this.isActive = isActive;
        this.description = description;
    }

    public void voidMethod() {
        System.out.println("Void method in class Two");
        System.out.println("Age: " + age);
        System.out.println("Is Active: " + isActive);
        System.out.println("Description: " + description);
    }

    public double typedMethod(double parameter) {
        System.out.println("Typed method in class Two");
        return age * parameter;
    }

    public void otherMethod(Three other) {
        System.out.println("Other method in class Two");
        System.out.println("Color: " + other.getColor());
        System.out.println("Symbol: " + other.getSymbol());
        System.out.println("Price: " + other.getPrice());
    }

    public void dynamicParametersMethod(int... numbers) {
        System.out.println("Dynamic Parameters Method in class Two");
        for (int num : numbers) {
            System.out.println("Number: " + num);
        }
    }

    // Перевизначений метод, що приймає дані іншого типу
    public double typedMethod(int parameter) {
        System.out.println("Overridden typed method in class Two");
        return age / parameter;
    }

    // Метод зі статичним ім'ям та динамічною логікою
    public static void staticMethod() {
        System.out.println("Static method in class Two");
        int randomValue = (int) (Math.random() * 1000);
        System.out.println("Random value: " + randomValue);
    }
}

public class Three {
    private String color;
    private char symbol;
    private float price;

    public Three(String color, char symbol, float price) {
        this.color = color;
        this.symbol = symbol;
        this.price = price;
    }

    public void voidMethod() {
        System.out.println("Void method in class Three");
        System.out.println("Color: " + color);
        System.out.println("Symbol: " + symbol);
        System.out.println("Price: " + price);
    }

    public int typedMethod(int parameter) {
        System.out.println("Typed method in class Three");
        return (int) (price * parameter);
    }

    public void otherMethod(One other) {
        System.out.println("Other method in class Three");
        System.out.println("Number: " + other.getNumber());
        System.out.println("Value: " + other.getValue());
        System.out.println("Name: " + other.getName());
    }

    public void dynamicParametersMethod(boolean... booleans) {
        System.out.println("Dynamic Parameters Method in class Three");
        for (boolean bool : booleans) {
            System.out.println("Boolean: " + bool);
        }
    }

    // Перевизначений метод, що приймає дані іншого типу
    public int typedMethod(double parameter) {
        System.out.println("Overridden typed method in class Three");
        return (int) (price / parameter);
    }

    // Метод зі статичним ім'ям та динамічною логікою
    public static void staticMethod() {
        System.out.println("Static method in class Three");
        int randomPrice = (int) (Math.random() * 100);
        System.out.println("Random price: " + randomPrice);
    }
}

public class Main {
    public static void main(String[] args) {
        One one = new One(10, 3.14, "First");
        Two two = new Two(25, true, "Second");
        Three three = new Three("Red", 'A', 9.99f);

        one.voidMethod();
        int resultOne = one.typedMethod(5);
        System.out.println("Result One: " + resultOne);
        one.otherMethod(two);
        one.dynamicParametersMethod("Hello", "World");
        // Виклик перевизначеного методу, що приймає дані іншого типу
        int overriddenResultOne = one.typedMethod(2.5);
        System.out.println("Overridden Result One: " + overriddenResultOne);

        two.voidMethod();
        double resultTwo = two.typedMethod(2.5);
        System.out.println("Result Two: " + resultTwo);
        two.otherMethod(three);
        two.dynamicParametersMethod(1, 2, 3, 4);
        // Виклик перевизначеного методу, що приймає дані іншого типу
        double overriddenResultTwo = two.typedMethod(4);
        System.out.println("Overridden Result Two: " + overriddenResultTwo);

        three.voidMethod();
        int resultThree = three.typedMethod(3);
        System.out.println("Result Three: " + resultThree);
        three.otherMethod(one);
        three.dynamicParametersMethod(true, false);
        // Виклик перевизначеного методу, що приймає дані іншого типу
        int overriddenResultThree = three.typedMethod(1.5);
        System.out.println("Overridden Result Three: " + overriddenResultThree);

        One.staticMethod();
        Two.staticMethod();
        Three.staticMethod();
    }
}
